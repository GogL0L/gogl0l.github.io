#+title: Monads finally explained
#+author: John MÃ¶ller
#+lastmod: 2021-09-27
#+categories[]: programming
#+draft: true
#+variable: value
#+list[]: value_1 value_2 value_3
* Introduction
The concept of a monad is probably the most infamous among
begginers who are learning functional programming. It's
notoriousness is understandable as it is from an advanced mathematical
field called Category Theory. We know that even though math is essential
for programming, the enthusiasm for the subject among programmers isn't
guaranteed. So if you didn't like High school algebra, then it's pretty
self explanatory why a graduate math subject is difficult.

But I think that even though the concept of a monad is from category theory,
it is really not neceseary to understand the subject. In this article
I will try to finally explain this notorious topic.

* Monands are not a "solution" for IO in FP
When monads are taught, they always tend to be framed as a solution
for the lack of state and IO in FP. This is simply not true (in sense of what the
student thinks a "solution" is.) For me this misconception was one of the
reason for why understanding monads were hard; I tried to understand how
this concept managed to yield proceredural programming without proceredural
programming. So if it isn't a solution, what is it then?

* Monads is a pretty way to encorporate procedural programming, using the FP philosophy
Functional programming, as you can hear in the name, puts an emphasis on functions. But
not any kind of function: we're interested in pure functions. Basically that means
a function that only returns a value, and has no side effects. Let's make this
clear with a python example:
#+begin_src python :results output
def pure_function(x):
    return x+5

def not_pure_function(x):
    print("hello")
#+end_src
