{
  "hash": "42e5106039e847a4ae45e67d27a341eb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Rake and Word Cloud\"\nformat: html\nauthor: \"John Möller\"\ndate: \"2024-01-31\"\ncategories: [Self-Study Notes, Python, Data Visualization]\ndraft: false\n---\n\n# Introduction\n\nGoogling about a technical topic and browsing images one might have come across a word cloud; a way to visualize the frequencies of words in some text by size. Below is a word cloud of some text about linear algebra (I would guess it is the text from the Wikipedia article).\n\n![Linear Algebra Word Cloud](https://miro.medium.com/v2/resize:fit:1400/1*I5N3dKyrWsgkzbD-PKWBMQ.jpeg)\n\nTo create such an image, we will use the package Rake, which transforms a text into a list of pairs consisting of keywords and their respective frequencies. Then we will visualize it using the package WordCloud.\n\n# Scraping Text from Wikipedia\n\n\nFirst off, let's get a text which we can base our word cloud on. The following code scrapes all the readable text from the Wikipedia page on Data Science. It is explained in this previous blog post: [HTMLParser Basics](https://fyradur.github.io/posts/HTMLParserBasics/).\n\n::: {#cell-4 .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nfrom html.parser import HTMLParser\n\n\nurl = 'https://en.wikipedia.org/wiki/Data_science'\ntext = requests.get(url).content.decode('utf-8')\n\n\nclass MyHTMLParser(HTMLParser):\n    script = False\n    res = \"\"\n    def handle_starttag(self, tag, attrs):\n        if tag.lower() in [\"script\",\"style\"]:\n            self.script = True\n    def handle_endtag(self, tag):\n        if tag.lower() in [\"script\",\"style\"]:\n            self.script = False\n    def handle_data(self, data):\n        if str.strip(data)==\"\" or self.script:\n            return\n        # We also in this example choose to remove [ edit ]\n        # in the following way.\n        self.res += ' '+data.replace('[ edit ]','')\n\n\nparser = MyHTMLParser()\nparser.feed(text)\ntext = parser.res\n\n# Let's see the beginning of the text.\nprint(text[:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Data science - Wikipedia Jump to content Main menu Main menu move to sidebar hide \n\t\tNavigation\n\t Main page Contents Current events Random article About Wikipedia Contact us Donate \n\t\tContribute\n\t Help Learn to edit Community portal Recent changes Upload file Languages Language links are at the top of the page. Search Search Create account Log in Personal tools Create account Log in \n\t\tPages for logged out editors  learn more Contributions Talk Contents move to sidebar hide (Top) 1 Foundations Toggle Foundations subsection 1.1 Relationship to statistics 2 Etymology Toggle Etymology subsection 2.1 Early usage 2.2 Modern usage 3 Data Science and Data Analysis 4 History 5 See also 6 References Toggle the table of contents Data science 46 languages العربية Azərbaycanca বাংলা Български Català Čeština Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego 한국어 Հայերեն हिन्दी Bahasa Indonesia IsiZulu Italiano עברית ಕನ್ನಡ Қазақша Latviešu Македонски Bahasa Melayu မြန်မာဘာသာ Ned\n```\n:::\n:::\n\n\n# Getting Key Word Frequencies Using Rake\n\nThe package `nlp_rake` provides a method `Rake` that creates an extractor object. We can pass our text into this object using its `apply` method, which will yield a list of keyword-frequency pairs.\n\n\nWhen creating the extractor object, we specify the maximum number of words a keyword can consist of, the minimum frequency for a keyword, and the minimum number of characters a keyword can have. In the following code, we use the values 2, 3, and 5, respectively.\n\n::: {#cell-6 .cell execution_count=2}\n``` {.python .cell-code}\nimport nlp_rake\nextractor = nlp_rake.Rake(max_words=2,min_freq=3,min_chars=5)\nres = extractor.apply(text)\nres\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n[('data scientist', 4.0),\n ('data visualization', 4.0),\n ('machine learning', 4.0),\n ('data mining', 4.0),\n ('sexiest job', 4.0),\n ('21st century', 4.0),\n ('big data', 4.0),\n ('data scientists', 4.0),\n ('data science', 3.925373134328358),\n ('information science', 3.925373134328358),\n ('computer science', 3.925373134328358),\n ('statistical learning', 3.9),\n ('^ davenport', 3.8),\n ('data analysis', 3.75),\n ('science', 1.9253731343283582),\n ('analysis', 1.75),\n ('insights', 1.6666666666666667),\n ('field', 1.4285714285714286),\n ('computational', 1.25),\n ('statistics', 1.2173913043478262),\n ('thomas', 1.2),\n ('mathematics', 1.0),\n ('education', 1.0),\n ('communications', 1.0),\n ('archived', 1.0),\n ('original', 1.0),\n ('chikio', 1.0),\n ('forbes', 1.0)]\n```\n:::\n:::\n\n\n# Creating a Word Cloud\n\nThe `wordcloud` provides us the method `WordCloud` to create our word cloud object. This object has a method called `generate_from_frequencies` but it doesn't accept the list format our `res` variable has. It needs to be in a dictionary format, so we'll need to convert it to a dictionary before passing it in.\n\nAfterwards, one can save the image of this object to a filepath using the `to_file` method. But to display it in Jupyter, we will use matplotlib to create a figure and then use the method `imshow`.\n\n::: {#cell-8 .cell execution_count=3}\n``` {.python .cell-code}\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nwc = WordCloud(background_color='white',width=800,height=600)\nplt.figure(figsize=(15,7))\nplt.imshow(wc.generate_from_frequencies({ k:v for k,v in res }))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=744 height=564}\n:::\n:::\n\n\n# Making a Word Cloud from Raw Text\nYou can also pass raw text directly into the word cloud object using the `generate` method. However, this approach considers the English language in general, which may not be useful when investigating keywords related to a specific topic.\n\n::: {#cell-10 .cell execution_count=4}\n``` {.python .cell-code}\nplt.imshow(wc.generate(text))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=547 height=416}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}